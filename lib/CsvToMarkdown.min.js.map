{"version":3,"file":"CsvToMarkdown.min.js","sources":["../src/CsvToMarkdown.ts"],"sourcesContent":["/**\n * Converts CSV to Markdown Table\n *\n * @param {string} csvContent - The string content of the CSV\n * @param {string} delimiter - The character(s) to use as the CSV column delimiter\n * @param {boolean} hasHeader - Whether to use the first row of Data as headers\n * @returns {string}\n */\nexport default function csvToMarkdown(csvContent, delimiter, hasHeader) {\n    if (delimiter === void 0) { delimiter = \"\\t\"; }\n    if (hasHeader === void 0) { hasHeader = false; }\n    if (delimiter != \"\\t\") {\n        csvContent = csvContent.replace(/\\t/g, \"    \");\n    }\n    var columns = csvContent.split(/\\r?\\n/);\n    var tabularData = [];\n    var maxRowLen = [];\n    var regsafeDelimiter = delimiter.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    var regex = new RegExp(\"\".concat(regsafeDelimiter, \"(?![^\\\"]*\\\"(?:$|\").concat(regsafeDelimiter, \"))\"));\n    columns.forEach(function (e, i) {\n        if (typeof tabularData[i] == \"undefined\") {\n            tabularData[i] = [];\n        }\n        var row = e.split(regex);\n        row.forEach(function (ee, ii) {\n            if (typeof maxRowLen[ii] == \"undefined\") {\n                maxRowLen[ii] = 0;\n            }\n            // escape pipes and backslashes\n            ee = ee.replace(/(\\||\\\\)/g, \"\\\\$1\");\n            maxRowLen[ii] = Math.max(maxRowLen[ii], ee.length);\n            tabularData[i][ii] = ee;\n        });\n    });\n    var headerOutput = \"\";\n    var seperatorOutput = \"\";\n    maxRowLen.forEach(function (len) {\n        var sizer = Array(len + 1 + 2);\n        seperatorOutput += \"|\" + sizer.join(\"-\");\n        headerOutput += \"|\" + sizer.join(\" \");\n    });\n    headerOutput += \"| \\n\";\n    seperatorOutput += \"| \\n\";\n    if (hasHeader) {\n        headerOutput = \"\";\n    }\n    var rowOutput = \"\";\n    tabularData.forEach(function (col, i) {\n        maxRowLen.forEach(function (len, y) {\n            var row = typeof col[y] == \"undefined\" ? \"\" : col[y];\n            var spacing = Array((len - row.length) + 1).join(\" \");\n            var out = \"| \".concat(row).concat(spacing, \" \");\n            if (hasHeader && i === 0) {\n                headerOutput += out;\n            }\n            else {\n                rowOutput += out;\n            }\n        });\n        if (hasHeader && i === 0) {\n            headerOutput += \"| \\n\";\n        }\n        else {\n            rowOutput += \"| \\n\";\n        }\n    });\n    return \"\".concat(headerOutput).concat(seperatorOutput).concat(rowOutput);\n}\n"],"names":["csvContent","delimiter","hasHeader","replace","columns","split","tabularData","maxRowLen","regsafeDelimiter","regex","RegExp","concat","forEach","e","i","ee","ii","Math","max","length","headerOutput","seperatorOutput","len","sizer","Array","join","rowOutput","col","y","row","spacing","out"],"mappings":"oPAQe,SAAuBA,EAAYC,EAAWC,QACvC,IAAdD,IAAwBA,EAAY,WACtB,IAAdC,IAAwBA,GAAY,GACvB,MAAbD,IACAD,EAAaA,EAAWG,QAAQ,MAAO,SAE3C,IAAIC,EAAUJ,EAAWK,MAAM,SAC3BC,EAAc,GACdC,EAAY,GACZC,EAAmBP,EAAUE,QAAQ,sBAAuB,QAC5DM,EAAQ,IAAIC,OAAO,GAAGC,OAAOH,EAAkB,kBAAoBG,OAAOH,EAAkB,OAChGJ,EAAQQ,QAAQ,SAAUC,EAAGC,QACI,IAAlBR,EAAYQ,KACnBR,EAAYQ,GAAK,IAEXD,EAAER,MAAMI,GACdG,QAAQ,SAAUG,EAAIC,QACM,IAAjBT,EAAUS,KACjBT,EAAUS,GAAM,GAGpBD,EAAKA,EAAGZ,QAAQ,WAAY,QAC5BI,EAAUS,GAAMC,KAAKC,IAAIX,EAAUS,GAAKD,EAAGI,QAC3Cb,EAAYQ,GAAGE,GAAMD,CACzB,EACJ,GACA,IAAIK,EAAe,GACfC,EAAkB,GACtBd,EAAUK,QAAQ,SAAUU,GACxB,IAAIC,EAAQC,MAAMF,EAAM,EAAI,GAC5BD,GAAmB,IAAME,EAAME,KAAK,KACpCL,GAAgB,IAAMG,EAAME,KAAK,IACrC,GACAL,GAAgB,OAChBC,GAAmB,OACfnB,IACAkB,EAAe,IAEnB,IAAIM,EAAY,GAoBhB,OAnBApB,EAAYM,QAAQ,SAAUe,EAAKb,GAC/BP,EAAUK,QAAQ,SAAUU,EAAKM,GAC7B,IAAIC,OAAuB,IAAVF,EAAIC,GAAoB,GAAKD,EAAIC,GAC9CE,EAAUN,MAAOF,EAAMO,EAAIV,OAAU,GAAGM,KAAK,KAC7CM,EAAM,KAAKpB,OAAOkB,GAAKlB,OAAOmB,EAAS,KACvC5B,GAAmB,IAANY,EACbM,GAAgBW,EAGhBL,GAAaK,CAErB,GACI7B,GAAmB,IAANY,EACbM,GAAgB,OAGhBM,GAAa,MAErB,GACO,GAAGf,OAAOS,GAAcT,OAAOU,GAAiBV,OAAOe,EAClE"}